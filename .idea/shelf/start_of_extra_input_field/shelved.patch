Index: app/src/main/java/com/bro/brocast/keyboards/FirstKeyboard.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bro.brocast.keyboards\r\n\r\nimport android.content.Context\r\nimport android.util.AttributeSet\r\nimport android.view.LayoutInflater\r\nimport android.view.View.OnClickListener\r\nimport android.view.inputmethod.InputConnection\r\nimport android.widget.Button\r\nimport android.widget.LinearLayout\r\nimport com.bro.brocast.R\r\n\r\nclass FirstKeyboard: LinearLayout {\r\n\r\n    constructor(context: Context) : super(context){\r\n        init(context)\r\n    }\r\n\r\n    constructor(context: Context, attrs: AttributeSet):    super(context, attrs){\r\n        init(context)\r\n    }\r\n\r\n    constructor(context: Context, attrs: AttributeSet?,    defStyleAttr: Int) : super(context, attrs, defStyleAttr) {\r\n        init(context)\r\n    }\r\n\r\n    private var inputConnection: InputConnection? = null\r\n\r\n    private fun init(context: Context) {\r\n        LayoutInflater.from(context).inflate(R.layout.keyboard_1, this, true)\r\n\r\n        val buttonIds = arrayOf(\r\n            R.id.button_grinning_face,\r\n            R.id.button_winking_face,\r\n            R.id.button_face_blowing_a_kiss,\r\n            R.id.button_kissing_face_with_closed_eyes,\r\n            R.id.button_face_with_stuck_out_tongue,\r\n            R.id.button_face_with_cold_sweat,\r\n            R.id.button_pensive_face,\r\n            R.id.button_face_with_tears_of_joy,\r\n            R.id.button_smiling_face_with_heart_eyes,\r\n            R.id.button_red_heart,\r\n            R.id.button_rolling_on_the_floor_laughing,\r\n            R.id.button_smiling_face_with_3_hearts,\r\n            R.id.button_folded_hands,\r\n            R.id.button_loudly_crying_face,\r\n            R.id.button_right_facing_fist,\r\n            R.id.button_left_facing_fist,\r\n            R.id.button_eggplant,\r\n            R.id.button_sweat_droplets,\r\n            R.id.button_banana,\r\n            R.id.button_thumbs_up,\r\n            R.id.button_fire,\r\n            R.id.button_rainbow,\r\n            R.id.button_clinking_beer_mugs,\r\n            R.id.button_wine_glass,\r\n            R.id.button_thinking_face,\r\n            R.id.button_mushroom,\r\n            R.id.button_peach,\r\n            R.id.button_pile_of_poo,\r\n            R.id.button_woman_facepalming,\r\n            R.id.button_fireworks,\r\n            R.id.button_confetti_ball,\r\n            R.id.button_party_popper\r\n        )\r\n\r\n        for (b in buttonIds) {\r\n            findViewById<Button>(b).setOnClickListener(clickButtonListener)\r\n        }\r\n    }\r\n\r\n    private val clickButtonListener = OnClickListener { view ->\r\n        when (view.id) {\r\n            R.id.button_grinning_face -> {\r\n                inputConnection!!.commitText(context.getString(R.string.grinning_face), 1)\r\n            }\r\n            R.id.button_winking_face -> {\r\n                inputConnection!!.commitText(context.getString(R.string.winking_face), 1)\r\n            }\r\n            R.id.button_face_blowing_a_kiss -> {\r\n                inputConnection!!.commitText(context.getString(R.string.face_blowing_a_kiss), 1)\r\n            }\r\n            R.id.button_kissing_face_with_closed_eyes -> {\r\n                inputConnection!!.commitText(context.getString(R.string.kissing_face_with_closed_eyes), 1)\r\n            }\r\n            R.id.button_face_with_stuck_out_tongue -> {\r\n                inputConnection!!.commitText(context.getString(R.string.face_with_stuck_out_tongue), 1)\r\n            }\r\n            R.id.button_face_with_cold_sweat -> {\r\n                inputConnection!!.commitText(context.getString(R.string.face_with_cold_sweat), 1)\r\n            }\r\n            R.id.button_pensive_face -> {\r\n                inputConnection!!.commitText(context.getString(R.string.pensive_face), 1)\r\n            }\r\n            R.id.button_face_with_tears_of_joy -> {\r\n                inputConnection!!.commitText(context.getString(R.string.face_with_tears_of_joy), 1)\r\n            }\r\n            R.id.button_smiling_face_with_heart_eyes -> {\r\n                inputConnection!!.commitText(context.getString(R.string.smiling_face_with_heart_eyes), 1)\r\n            }\r\n            R.id.button_red_heart -> {\r\n                inputConnection!!.commitText(context.getString(R.string.red_heart), 1)\r\n            }\r\n            R.id.button_rolling_on_the_floor_laughing -> {\r\n                inputConnection!!.commitText(context.getString(R.string.rolling_on_the_floor_laughing), 1)\r\n            }\r\n            R.id.button_smiling_face_with_3_hearts -> {\r\n                inputConnection!!.commitText(context.getString(R.string.smiling_face_with_3_hearts), 1)\r\n            }\r\n            R.id.button_folded_hands -> {\r\n                inputConnection!!.commitText(context.getString(R.string.folded_hands), 1)\r\n            }\r\n            R.id.button_loudly_crying_face -> {\r\n                inputConnection!!.commitText(context.getString(R.string.loudly_crying_face), 1)\r\n            }\r\n            R.id.button_right_facing_fist -> {\r\n                inputConnection!!.commitText(context.getString(R.string.right_facing_fist), 1)\r\n            }\r\n            R.id.button_left_facing_fist -> {\r\n                inputConnection!!.commitText(context.getString(R.string.left_facing_fist), 1)\r\n            }\r\n            R.id.button_eggplant -> {\r\n                inputConnection!!.commitText(context.getString(R.string.eggplant), 1)\r\n            }\r\n            R.id.button_sweat_droplets -> {\r\n                inputConnection!!.commitText(context.getString(R.string.sweat_droplets), 1)\r\n            }\r\n            R.id.button_banana -> {\r\n                inputConnection!!.commitText(context.getString(R.string.banana), 1)\r\n            }\r\n            R.id.button_thumbs_up -> {\r\n                inputConnection!!.commitText(context.getString(R.string.thumbs_up), 1)\r\n            }\r\n            R.id.button_fire -> {\r\n                inputConnection!!.commitText(context.getString(R.string.fire), 1)\r\n            }\r\n            R.id.button_rainbow -> {\r\n                inputConnection!!.commitText(context.getString(R.string.rainbow), 1)\r\n            }\r\n            R.id.button_clinking_beer_mugs -> {\r\n                inputConnection!!.commitText(context.getString(R.string.clinking_beer_mugs), 1)\r\n            }\r\n            R.id.button_wine_glass -> {\r\n                inputConnection!!.commitText(context.getString(R.string.wine_glass), 1)\r\n            }\r\n            R.id.button_thinking_face -> {\r\n                inputConnection!!.commitText(context.getString(R.string.thinking_face), 1)\r\n            }\r\n            R.id.button_mushroom -> {\r\n                inputConnection!!.commitText(context.getString(R.string.mushroom), 1)\r\n            }\r\n            R.id.button_peach -> {\r\n                inputConnection!!.commitText(context.getString(R.string.peach), 1)\r\n            }\r\n            R.id.button_pile_of_poo -> {\r\n                inputConnection!!.commitText(context.getString(R.string.pile_of_poo), 1)\r\n            }\r\n            R.id.button_woman_facepalming -> {\r\n                inputConnection!!.commitText(context.getString(R.string.woman_facepalming), 1)\r\n            }\r\n            R.id.button_fireworks -> {\r\n                inputConnection!!.commitText(context.getString(R.string.fireworks), 1)\r\n            }\r\n            R.id.button_confetti_ball -> {\r\n                inputConnection!!.commitText(context.getString(R.string.confetti_ball), 1)\r\n            }\r\n            R.id.button_party_popper -> {\r\n                inputConnection!!.commitText(context.getString(R.string.party_popper), 1)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun setInputConnection(ic: InputConnection) {\r\n        inputConnection = ic\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bro/brocast/keyboards/FirstKeyboard.kt	(revision 08cc78f79d0763ddbf3d6d9dffaece27e36adc69)
+++ app/src/main/java/com/bro/brocast/keyboards/FirstKeyboard.kt	(date 1579257965569)
@@ -3,13 +3,15 @@
 import android.content.Context
 import android.util.AttributeSet
 import android.view.LayoutInflater
+import android.view.View
 import android.view.View.OnClickListener
 import android.view.inputmethod.InputConnection
 import android.widget.Button
 import android.widget.LinearLayout
+import android.widget.ScrollView
 import com.bro.brocast.R
 
-class FirstKeyboard: LinearLayout {
+class FirstKeyboard: ScrollView {
 
     constructor(context: Context) : super(context){
         init(context)
@@ -25,6 +27,8 @@
 
     private var inputConnection: InputConnection? = null
 
+    var extraInputField: LinearLayout? = null
+
     private fun init(context: Context) {
         LayoutInflater.from(context).inflate(R.layout.keyboard_1, this, true)
 
@@ -72,6 +76,7 @@
         when (view.id) {
             R.id.button_grinning_face -> {
                 inputConnection!!.commitText(context.getString(R.string.grinning_face), 1)
+                extraInputField!!.visibility = View.VISIBLE
             }
             R.id.button_winking_face -> {
                 inputConnection!!.commitText(context.getString(R.string.winking_face), 1)
Index: app/src/main/java/com/bro/brocast/MessagingActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bro.brocast\r\n\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.text.InputType\r\nimport android.view.View\r\nimport android.widget.EditText\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport androidx.viewpager.widget.ViewPager\r\nimport com.beust.klaxon.JsonObject\r\nimport com.bro.brocast.adapters.BroViewPager\r\nimport com.bro.brocast.adapters.MessagesAdapter\r\nimport com.bro.brocast.adapters.PagerBrodapter\r\nimport com.bro.brocast.adapters.SlidingTabLayout\r\nimport com.bro.brocast.api.GetMessagesAPI\r\nimport com.bro.brocast.api.SendMessagesAPI\r\nimport com.bro.brocast.objects.Message\r\nimport kotlinx.android.synthetic.main.activity_messaging.*\r\n\r\n\r\nclass MessagingActivity: AppCompatActivity() {\r\n\r\n    val messages: ArrayList<Message> = ArrayList()\r\n    private lateinit var broMessageList: RecyclerView\r\n\r\n    var broName: String? = \"\"\r\n    var bromotion: String? = \"\"\r\n    var brosBro: String? = \"\"\r\n    var brosBromotion: String? = \"\"\r\n\r\n    var broTextField: EditText? = null\r\n\r\n    var vpPager: BroViewPager? = null\r\n    var mSlidingTabLayout: SlidingTabLayout? = null\r\n\r\n    // A simple solution to determine how many message should be loaded.\r\n    var page: Int = 1\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_messaging)\r\n\r\n        val intent = intent\r\n        broName = intent.getStringExtra(\"broName\")\r\n        bromotion = intent.getStringExtra(\"bromotion\")\r\n        brosBro = intent.getStringExtra(\"brosBro\")\r\n        brosBromotion = intent.getStringExtra(\"brosBromotion\")\r\n\r\n        // Creates a vertical Layout Manager\r\n        broMessageList = findViewById(R.id.broMessages)\r\n        broTextField = findViewById(R.id.broMessageField) as EditText\r\n\r\n        broTextField!!.setOnClickListener(clickButtonListener)\r\n\r\n        broTextField!!.setRawInputType(InputType.TYPE_CLASS_TEXT)\r\n        broTextField!!.setTextIsSelectable(true)\r\n        broTextField!!.setTextSize(20f)\r\n        // TODO @Skools: set the minimum SDK to this version (LOLLIPOP).\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n            broTextField!!.requestFocus()\r\n            broTextField!!.showSoftInputOnFocus = false\r\n        }\r\n\r\n        val layoutMgr = LinearLayoutManager(this)\r\n        broMessageList.layoutManager = layoutMgr\r\n\r\n        GetMessagesAPI.messagesAdapter = MessagesAdapter(messages)\r\n        broMessages.adapter = GetMessagesAPI.messagesAdapter\r\n\r\n        sendBroMessage.setOnClickListener(clickButtonListener)\r\n\r\n        loadMessages()\r\n\r\n        broMessageList.addOnScrollListener(object : RecyclerView.OnScrollListener() {\r\n            override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {\r\n                super.onScrollStateChanged(recyclerView, newState)\r\n                if (!recyclerView.canScrollVertically(1)) {\r\n                    page = 2\r\n                    loadMessages()\r\n                }\r\n            }\r\n        })\r\n\r\n        vpPager = findViewById(R.id.vpPager) as BroViewPager\r\n        val adapterViewPager = PagerBrodapter(supportFragmentManager)\r\n        adapterViewPager.broTextField = broTextField\r\n\r\n        // TODO @Skools: We set the pagerBrodapter twice. See if you can fix this.\r\n        vpPager!!.adapter = adapterViewPager\r\n        vpPager!!.pagerBrodapter = adapterViewPager\r\n\r\n        mSlidingTabLayout = findViewById(R.id.sliding_tabs)\r\n\r\n        val iconArray = arrayOf(\r\n            R.drawable.tab_most_used,\r\n            R.drawable.tab_smile,\r\n            R.drawable.tab_animals,\r\n            R.drawable.tab_food,\r\n            R.drawable.tab_sports,\r\n            R.drawable.tab_travel,\r\n            R.drawable.tab_objects,\r\n            R.drawable.tab_symbol,\r\n            R.drawable.tab_flags\r\n        )\r\n        mSlidingTabLayout!!.setTabIcons(iconArray)\r\n\r\n        mSlidingTabLayout!!.setDistributeEvenly(true)\r\n        mSlidingTabLayout!!.setViewPager(vpPager)\r\n\r\n\r\n        vpPager!!.addOnPageChangeListener(object : ViewPager.OnPageChangeListener {\r\n\r\n            // This method will be invoked when a new page becomes selected.\r\n            override fun onPageSelected(position: Int) {\r\n                // The page which is currently active\r\n            }\r\n\r\n            // This method will be invoked when the current page is scrolled\r\n            override fun onPageScrolled(\r\n                position: Int,\r\n                positionOffset: Float,\r\n                positionOffsetPixels: Int\r\n            ) {\r\n                // Code goes here\r\n            }\r\n\r\n            // Called when the scroll state changes:\r\n            // SCROLL_STATE_IDLE, SCROLL_STATE_DRAGGING, SCROLL_STATE_SETTLING\r\n            override fun onPageScrollStateChanged(state: Int) {\r\n                // Code goes here\r\n            }\r\n        })\r\n\r\n        vpPager!!.visibility = View.GONE\r\n        mSlidingTabLayout!!.visibility = View.GONE\r\n    }\r\n\r\n    private val clickButtonListener = View.OnClickListener { view ->\r\n        when (view.getId()) {\r\n            R.id.sendBroMessage -> {\r\n                val message = broTextField!!.text.toString()\r\n                // Simple check to make sure the user cannot send an empty message.\r\n                // This check is also done in the backend, but also here.\r\n                if (message != \"\") {\r\n                    println(\"bro $broName wants to send a message to $brosBro. The message is $message\")\r\n\r\n                    val jsonObj = JsonObject()\r\n                    jsonObj[\"message\"] = message\r\n\r\n                    SendMessagesAPI.sendMessages(\r\n                        broName!!,\r\n                        bromotion!!,\r\n                        brosBro!!,\r\n                        brosBromotion!!,\r\n                        jsonObj,\r\n                        applicationContext,\r\n                        this@MessagingActivity\r\n                    )\r\n\r\n                    // clear the input field\r\n                    broTextField!!.text.clear()\r\n                }\r\n            }\r\n            R.id.broMessageField -> {\r\n                // We want to make the keyboard visible if it isn't yet.\r\n                if (vpPager!!.visibility != View.VISIBLE) {\r\n                    vpPager!!.visibility = View.VISIBLE\r\n                    mSlidingTabLayout!!.visibility = View.VISIBLE\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun loadMessages() {\r\n        GetMessagesAPI.getMessages(broName!!, bromotion!!, brosBro!!, brosBromotion!!, page, applicationContext)\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        // We want to make the keyboard invisible if it isn't yet.\r\n        if (vpPager!!.visibility == View.VISIBLE) {\r\n            vpPager!!.visibility = View.GONE\r\n            mSlidingTabLayout!!.visibility = View.GONE\r\n        } else {\r\n            super.onBackPressed()\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bro/brocast/MessagingActivity.kt	(revision 08cc78f79d0763ddbf3d6d9dffaece27e36adc69)
+++ app/src/main/java/com/bro/brocast/MessagingActivity.kt	(date 1579257913649)
@@ -5,7 +5,7 @@
 import android.text.InputType
 import android.view.View
 import android.widget.EditText
-import android.widget.Toast
+import android.widget.LinearLayout
 import androidx.appcompat.app.AppCompatActivity
 import androidx.recyclerview.widget.LinearLayoutManager
 import androidx.recyclerview.widget.RecyclerView
@@ -39,6 +39,8 @@
     // A simple solution to determine how many message should be loaded.
     var page: Int = 1
 
+    var extraInputField: LinearLayout? = null
+
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_messaging)
@@ -84,9 +86,13 @@
             }
         })
 
-        vpPager = findViewById(R.id.vpPager) as BroViewPager
+        // The extra input field for the keyboard, here more options will be available
+        extraInputField = findViewById(R.id.extra_input_field)
+
+        vpPager = findViewById(R.id.vpPager)
         val adapterViewPager = PagerBrodapter(supportFragmentManager)
         adapterViewPager.broTextField = broTextField
+        adapterViewPager.extraInputField = extraInputField
 
         // TODO @Skools: We set the pagerBrodapter twice. See if you can fix this.
         vpPager!!.adapter = adapterViewPager
@@ -115,7 +121,6 @@
 
             // This method will be invoked when a new page becomes selected.
             override fun onPageSelected(position: Int) {
-                // The page which is currently active
             }
 
             // This method will be invoked when the current page is scrolled
@@ -124,18 +129,17 @@
                 positionOffset: Float,
                 positionOffsetPixels: Int
             ) {
-                // Code goes here
             }
 
             // Called when the scroll state changes:
             // SCROLL_STATE_IDLE, SCROLL_STATE_DRAGGING, SCROLL_STATE_SETTLING
             override fun onPageScrollStateChanged(state: Int) {
-                // Code goes here
             }
         })
 
         vpPager!!.visibility = View.GONE
         mSlidingTabLayout!!.visibility = View.GONE
+        extraInputField!!.visibility = View.GONE
     }
 
     private val clickButtonListener = View.OnClickListener { view ->
@@ -169,6 +173,7 @@
                 if (vpPager!!.visibility != View.VISIBLE) {
                     vpPager!!.visibility = View.VISIBLE
                     mSlidingTabLayout!!.visibility = View.VISIBLE
+                    extraInputField!!.visibility = View.VISIBLE
                 }
             }
         }
@@ -183,6 +188,7 @@
         if (vpPager!!.visibility == View.VISIBLE) {
             vpPager!!.visibility = View.GONE
             mSlidingTabLayout!!.visibility = View.GONE
+            extraInputField!!.visibility = View.GONE
         } else {
             super.onBackPressed()
         }
Index: app/src/main/java/com/bro/brocast/keyboards/FirstKeyboardFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bro.brocast.keyboards\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.inputmethod.EditorInfo\r\nimport android.widget.EditText\r\nimport androidx.fragment.app.Fragment\r\nimport com.bro.brocast.R\r\n\r\n\r\nclass FirstKeyboardFragment : Fragment() {\r\n    // Store instance variables\r\n    private var title: String? = null\r\n    private var page: Int = 0\r\n\r\n    var broTextField: EditText? = null\r\n\r\n    // Store instance variables based on arguments passed\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        page = arguments!!.getInt(\"someInt\", 0)\r\n        title = arguments!!.getString(\"someTitle\")\r\n    }\r\n\r\n    // Inflate the view for the fragment based on layout XML\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        val view = inflater.inflate(R.layout.keyboard_1_fragment, container, false)\r\n\r\n        val keyboard = view.findViewById(R.id.keyboard) as FirstKeyboard\r\n\r\n        val ic = broTextField!!.onCreateInputConnection(EditorInfo())\r\n        keyboard.setInputConnection(ic)\r\n\r\n        return view\r\n    }\r\n\r\n    companion object {\r\n\r\n        // newInstance constructor for creating fragment with arguments\r\n        // We added the editText here that the focus of the keyboard should be on.\r\n        fun newInstance(page: Int, title: String, broTextField: EditText): FirstKeyboardFragment {\r\n            val fragment = FirstKeyboardFragment()\r\n            fragment.broTextField = broTextField\r\n            val args = Bundle()\r\n            args.putInt(\"someInt\", page)\r\n            args.putString(\"someTitle\", title)\r\n            fragment.arguments = args\r\n            return fragment\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bro/brocast/keyboards/FirstKeyboardFragment.kt	(revision 08cc78f79d0763ddbf3d6d9dffaece27e36adc69)
+++ app/src/main/java/com/bro/brocast/keyboards/FirstKeyboardFragment.kt	(date 1579257708956)
@@ -6,6 +6,7 @@
 import android.view.ViewGroup
 import android.view.inputmethod.EditorInfo
 import android.widget.EditText
+import android.widget.LinearLayout
 import androidx.fragment.app.Fragment
 import com.bro.brocast.R
 
@@ -16,6 +17,7 @@
     private var page: Int = 0
 
     var broTextField: EditText? = null
+    var extraInputField: LinearLayout? = null
 
     // Store instance variables based on arguments passed
     override fun onCreate(savedInstanceState: Bundle?) {
@@ -33,6 +35,8 @@
         val ic = broTextField!!.onCreateInputConnection(EditorInfo())
         keyboard.setInputConnection(ic)
 
+        keyboard.extraInputField = extraInputField
+
         return view
     }
 
@@ -40,9 +44,10 @@
 
         // newInstance constructor for creating fragment with arguments
         // We added the editText here that the focus of the keyboard should be on.
-        fun newInstance(page: Int, title: String, broTextField: EditText): FirstKeyboardFragment {
+        fun newInstance(page: Int, title: String, broTextField: EditText, extraInputField: LinearLayout): FirstKeyboardFragment {
             val fragment = FirstKeyboardFragment()
             fragment.broTextField = broTextField
+            fragment.extraInputField = extraInputField
             val args = Bundle()
             args.putInt("someInt", page)
             args.putString("someTitle", title)
Index: app/src/main/res/layout/activity_messaging.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:background=\"@color/background\"\r\n    android:id=\"@+id/linearLayout7\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\">\r\n\r\n\r\n    <EditText\r\n        android:id=\"@+id/broMessageField\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"8dp\"\r\n        android:layout_marginEnd=\"8dp\"\r\n        android:autofillHints=\"TODO\"\r\n        android:hint=\"@string/bro_message\"\r\n        android:inputType=\"text\"\r\n        android:textAlignment=\"center\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/sliding_tabs\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/sendBroMessage\"\r\n        app:layout_constraintHorizontal_bias=\"0.5\"\r\n        app:layout_constraintStart_toStartOf=\"parent\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/sendBroMessage\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginEnd=\"8dp\"\r\n        android:layout_marginRight=\"8dp\"\r\n        android:text=\"@string/send\"\r\n        app:layout_constraintBottom_toBottomOf=\"@+id/broMessageField\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintHorizontal_bias=\"0.5\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/broMessageField\"\r\n        app:layout_constraintTop_toTopOf=\"@+id/broMessageField\" />\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id=\"@+id/broMessages\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"0dp\"\r\n        android:layout_marginTop=\"8dp\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/broMessageField\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        tools:layout_editor_absoluteX=\"8dp\" />\r\n\r\n    <com.bro.brocast.adapters.SlidingTabLayout\r\n        android:id=\"@+id/sliding_tabs\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/vpPager\" />\r\n\r\n    <com.bro.brocast.adapters.BroViewPager\r\n        android:id=\"@+id/vpPager\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"0dp\"\r\n        android:layout_alignParentBottom=\"true\"\r\n        android:orientation=\"vertical\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        tools:layout_editor_absoluteX=\"0dp\">\r\n    </com.bro.brocast.adapters.BroViewPager>\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_messaging.xml	(revision 08cc78f79d0763ddbf3d6d9dffaece27e36adc69)
+++ app/src/main/res/layout/activity_messaging.xml	(date 1579256860806)
@@ -61,4 +61,20 @@
         tools:layout_editor_absoluteX="0dp">
     </com.bro.brocast.adapters.BroViewPager>
 
+    <LinearLayout
+        android:id="@+id/extra_input_field"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        app:layout_constraintBottom_toBottomOf="parent"
+        android:orientation="vertical">
+
+        <Button
+            android:id="@+id/button_back"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            app:layout_constraintBottom_toBottomOf="parent"
+            android:text="Button"/>
+
+    </LinearLayout>
+
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/com/bro/brocast/adapters/PagerBrodapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bro.brocast.adapters\r\n\r\nimport android.widget.EditText\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.FragmentManager\r\nimport androidx.fragment.app.FragmentPagerAdapter\r\nimport com.bro.brocast.keyboards.*\r\n\r\nclass PagerBrodapter(fragmentManager: FragmentManager) : FragmentPagerAdapter(fragmentManager) {\r\n\r\n    var broTextField: EditText? = null\r\n\r\n    // Returns total number of pages\r\n    override fun getCount(): Int {\r\n        return NUM_ITEMS\r\n    }\r\n\r\n    // Returns the fragment to display for that page\r\n    override fun getItem(position: Int): Fragment {\r\n        when (position) {\r\n            0  -> {\r\n                return FirstKeyboardFragment.newInstance(0, \"Page # 1\", broTextField!!)\r\n            }\r\n            1 -> {\r\n                return SecondKeyboardFragment.newInstance(1, \"Page # 2\", broTextField!!)\r\n            }\r\n            2 -> {\r\n                return ThirdKeyboardFragment.newInstance(2, \"Page # 3\", broTextField!!)\r\n            }\r\n            3 -> {\r\n                return FourthKeyboardFragment.newInstance(3, \"Page # 4\", broTextField!!)\r\n            }\r\n            4 -> {\r\n                return FifthKeyboardFragment.newInstance(4, \"Page # 5\", broTextField!!)\r\n            }\r\n            5 -> {\r\n                return SixthsKeyboardFragment.newInstance(5, \"Page # 6\", broTextField!!)\r\n            }\r\n            6 -> {\r\n                return SeventhKeyboardFragment.newInstance(6, \"Page # 7\", broTextField!!)\r\n            }\r\n            7 -> {\r\n                return EighthKeyboardFragment.newInstance(7, \"Page # 8\", broTextField!!)\r\n            }\r\n            // TODO @Sander: add a most used keyboard?\r\n            8 -> {\r\n                return NinthKeyboardFragment.newInstance(8, \"Page # 9\", broTextField!!)\r\n            }\r\n            else -> {\r\n                return FirstKeyboardFragment.newInstance(0, \"Page # 1\", broTextField!!)\r\n            }\r\n        }\r\n    }\r\n\r\n    companion object {\r\n        private val NUM_ITEMS = 9\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bro/brocast/adapters/PagerBrodapter.kt	(revision 08cc78f79d0763ddbf3d6d9dffaece27e36adc69)
+++ app/src/main/java/com/bro/brocast/adapters/PagerBrodapter.kt	(date 1579257580463)
@@ -1,6 +1,7 @@
 package com.bro.brocast.adapters
 
 import android.widget.EditText
+import android.widget.LinearLayout
 import androidx.fragment.app.Fragment
 import androidx.fragment.app.FragmentManager
 import androidx.fragment.app.FragmentPagerAdapter
@@ -9,6 +10,7 @@
 class PagerBrodapter(fragmentManager: FragmentManager) : FragmentPagerAdapter(fragmentManager) {
 
     var broTextField: EditText? = null
+    var extraInputField: LinearLayout? = null
 
     // Returns total number of pages
     override fun getCount(): Int {
@@ -19,7 +21,8 @@
     override fun getItem(position: Int): Fragment {
         when (position) {
             0  -> {
-                return FirstKeyboardFragment.newInstance(0, "Page # 1", broTextField!!)
+                // TODO @Sander: add a most used keyboard? placeholder for now
+                return FirstKeyboardFragment.newInstance(0, "Page # 1", broTextField!!, extraInputField!!)
             }
             1 -> {
                 return SecondKeyboardFragment.newInstance(1, "Page # 2", broTextField!!)
@@ -42,12 +45,11 @@
             7 -> {
                 return EighthKeyboardFragment.newInstance(7, "Page # 8", broTextField!!)
             }
-            // TODO @Sander: add a most used keyboard?
             8 -> {
                 return NinthKeyboardFragment.newInstance(8, "Page # 9", broTextField!!)
             }
             else -> {
-                return FirstKeyboardFragment.newInstance(0, "Page # 1", broTextField!!)
+                return FirstKeyboardFragment.newInstance(0, "Page # 1", broTextField!!, extraInputField!!)
             }
         }
     }
